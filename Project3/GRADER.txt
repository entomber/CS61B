                                     GRADER

====================================================================

****************
* WUGraph.java *
****************

--------------------------------------------------------------------
Explanation of data structures used in the implementation of WUGraph
--------------------------------------------------------------------

Summary
-------

Vertex:
A vertex is represented as a DListNode (doubly-linked list node) in vertices DList (doubly-linked list).  Each vertex's adjacency list is the item in the DListNode, a DList<Edge>.

There are two hash tables, vertexToAdjList and adjListToVertex, which map between an Object vertex passed into the application and the DListNode which stores the vertex's adjacency list.


Edge:
An edge is represented by an Edge object.  It has fields for vertices that make up the edge, weight, and the DListNodes in the adjacency list(s) where the edge is stored.  A self-edge only appears in one adjacency list, while normal edge appears in two different ones.

A hash table, vertexPairToEdge, maps a VertexPair object to an Edge.


Details
-------

1.
Adjacency list:
DList<DList<Edge>> vertices

Edges are stored in adjacency lists which are represented with doubly-linked lists.  The outer list represent vertices and the inner list the edges for each vertex.

Doubly-linked list is used to ensure O(d) (where d = degree of the vertex) running time for removeVertex() and O(1) running time for removeEdge().  If we know the node we want to remove, in a doubly-linked list it would take O(1) time to remove it, but in a singly-linked list it would take O(n) time.


2.
(Vertex <--> Adjacency list) hash tables:
Dictionary vertexToAdjList
Dictionary adjListToVertex

There are two hash tables to map between the Object vertex passed into our application and the ListNode in the vertices list which stores that vertex's adjacency list.  This ensures O(1) running time for the lookup of a vertex's adjacency list given an Object vertex, or lookup the actual vertex Object given the DListNode that stores the vertex's adjacency list.


3.  
(Vertex --> Degree of vertex) hash table:
Dictionary vertexToDegree

A hashtable is used to maintain the degree of a vertex.  This ensures O(1) running time for degree().


4.  
(VertexPair --> Edge) hash table:
Dictionary vertexPairToEdge

A hashtable is used to map a VertexPair to an Edge stored in the adjacency list of the edge's vertices (or single vertex given a self-edge).


--------------------------------------------------------------------
Explain choices made in implementation to ensure removeVertex() runs 
in O(d) time (Part I, design element[4]).
--------------------------------------------------------------------

I choose option [iii] in design element[4], using a single Edge object stored in both vertex's adjacency lists with references to both DListNodes its stored in (or single DListNode for self-edge).  This implementation seemed more straightforward than option [i] as only 1 edge is required.

removeVertex() looks up the vertex's adjacency list in the hash table vertexToAdjList, and then: 
(1) iterates through the degree d edges in the list, and remove each by calling DListNode.remove on the edge which takes O(d) time.
(2) removes the vertex (by removing its adjacency list) from vertices list which takes O(1) time by looking up the DListNode the vertex is stored in using vertexToAdjList hash table.
(3) removes the vertex and its adjacency list from adjListToVertex and vertexToAdjList hash tables which takes O(1) time.


-------------------------------------------------------------------
Explain choices made in implementation to ensure getVertices() runs
in O(|V|) time (design element[2]).
-------------------------------------------------------------------

All vertices in the graph are stored in a vertices list (doubly-linked list) which stores V vertices.  We can iterate through this list and determine the vertex Object passed into our applicaton by looking it up in the hash table adjListToVertex which takes O(1) running time.  This ensures O(|V|) running time for getVertices().

=====================================================================

****************
* Kruskal.java *
****************

--------------------------------------------------------------------
Explanation of data structures used in the implementation of Kruskal
--------------------------------------------------------------------

Basically followed the algorithmic description to implement Kruskal's algorithm.  A linked list is used to store the edges instead of an array.  We don't know how many edges there are ahead of time because with the calls to getNeighbors, we generate 2 normal edges (duplicates) for a vertex pair while there's only 1 self-edge.  

There will be duplicates added to the edge list, but that's okay.  A disjoint sets data structure is used to represent vertices connected to one another.  After adding the first pair to the MST, the second pair will be ignored since the vertices in the disjoint sets will be in the same set.  Also, the edge was just added in the MST so it cannot be added again anyways.