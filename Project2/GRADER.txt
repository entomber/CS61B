                                     GRADER

Name of student running submit: entomber
Login of student running submit: N/A

Second team member's name: N/A
Second team member's login: N/A

Third team member's name (if any): N/A
Third team member's login: N/A

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the 61B lab machines?
N/A

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.


Additional Classes:
1. GameBoard
2. List
3. GameTreeSearch
4. EvaluationFunction


Modules used by MachinePlayer:
1. Generate a list of all valid moves (class: GameBoard)
2. Find chips (of same color) that form connections with a chip (class: GameBoard)
3. List to store valid moves, and all chips that form connection with a chip (class: List)
4. Determine whether game board contains any networks for a given player (class: GameBoard)
5. Compute an evaluation function for a board (class: EvaluationFunction)
6. Perform minimax tree search (class: GameTreeSearch)


Module interface:

1. Generate a list of all valid moves (class: GameBoard)
/**
 *  getValidMoves() generates a List of all valid moves for the player.
 *  A full description of what constitutes a valid move appears in the
 *  project "README" file.
 *
 *  @param whitePlayer true if white player, false if black player
 *  @return a List of all valid moves for the player.
 *
 *  Performance: runs in O(n^2) time, where n is the size of the board, BOARD_SIZE
 **/
protected List<Move> getValidMoves(boolean whitePlayer)


2. Find chips (of same color) that form connections with a chip (class: GameBoard)
/**
 *  getConnections() generates a List of chip positions, Integer arrays coordinates, 
 *  already on the board that form a connection with the current chip position.
 *
 *  @param whitePlayer true if white player, false if black player
 *  @param x is x coordinate of the square the chip is in.
 *  @param y is the y coordinate of the square the chip is in.
 *  @return a List of chip positions that form a connection with chip at given x,y.
 *
 *  Performance: runs in O(1) time.
 **/
protected List<Integer[]> getConnections(boolean whitePlayer, int x, int y)


3. List to store valid moves, and all chips that form connection with a chip (class: List)

From HW5


4. Determine whether game board contains any networks for a given player (class: GameBoard)
/**
 *  hasValidNetwork() determines whether "this" GameBoard has a valid network
 *  for player "side".  (Does not check whether the opponent has a network.)
 *  A full description of what constitutes a valid network appears in the
 *  project "README" file.
 *
 *  Unusual conditions:
 *    If side is neither MachinePlayer.COMPUTER nor MachinePlayer.OPPONENT,
 *      returns false.
 *    If GameBoard squares contain illegal values, the behavior of this
 *      method is undefined (i.e., don't expect any reasonable behavior).
 *
 *  @param whitePlayer true if white player, false if black player
 *  @return true if player "side" has a winning network in "this" GameBoard,
 *    false otherwise.
 **/
protected boolean hasValidNetwork(boolean whitePlayer)


5. Compute an evaluation function for a board (class: Evaluation)

/**
 *  evaluate() assigns a score to a Gameboard "board" for a MachinePlayer
 *  "player" based upon an evaluation function.  A full description of what 
 *  the evaluation function should do appears in the project "README" file.
 *
 *  @param board is the Gameboard
 *  @param player is the MachinePlayer
 *  @return a double that represents the represents the odds of winning for
 *    a GameBoard "board" and MachinePlayer "player".
 **/
protected double evaluate(GameBoard board, MachinePlayer player)


6. Perform minimax tree search (class: GameTreeSearch)
/**
 *  chooseMove() returns a new move for MachinePlayer "player" based on
 *  GameBoard board.  Does not update "board".
 *
 *  @param board is the Gameboard
 *  @param player is the MachinePlayer
 *  @return a Move based on GameBoard "board" for MachinePlayer "player".
 **/
protected Move chooseMove(GameBoard board, MachinePlayer player)

Enhancements/optimizations after main implementation:
- implement remove() for necessary iterators
- look into Java 8 streams