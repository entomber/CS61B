                                     GRADER

Name of student running submit: entomber
Login of student running submit: N/A

Second team member's name: N/A
Second team member's login: N/A

Third team member's name (if any): N/A
Third team member's login: N/A

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
- Does your program compile without errors?
Yes

- Have you tested your program on the 61B lab machines?
N/A

- Did you successfully implement game tree search?
Yes

- Did you successfully implement alpha-beta pruning?
Yes

- Are there any limitations on it?
Not really.  As far as difficulty of the MachinePlayer, it could be enhanced with
a better evaluation function.  A few performance tweaks would be to use a bitboard
representation of a Gameboard instead of array representation, and threading to 
stop execution and return best move if time limit reached.

- What is the default number of search levels set by the one-parameter MachinePlayer
  constructor (or is it a variable-depth search)?
Default search level is 5 for add moves.  4 levels for step moves.

- Describe your board evaluation function in some detail.
It evaluates mobility and number of chips in goal like following:
score = 0.1 * (mobility) + 0.25 * (chips in goal)

For mobility, it simply calculates the number of connections between the player's
chips and subtracts the number of connections between the opponent's chips.

For chips in goal, it gives a score of player's chips in goals minus the opponent's
chips in goals.  A chip in a goal is only scored once, so more than 1 chip in a goal
does not count.  Additionally, score is only counted if number of chips a player
has is below a threshold value, 4. This promotes the MachinePlayer choosing to place 
chips in goals earlier as that seems to have more strategic value.

- Does your MachinePlayer use any special method of choosing the first few moves?
It starts minimax search with a randomly selected move.  I used this approach since
multiple moves have the same score, so it won't always choose the same move each game.

Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.


Additional Classes:
1. GameBoard - represents a game board
2. GameTree - performs minimax search with alpha-beta pruning
3. List - data structure used throughout project (e.g. in GameBoard to store list of chips,
in Graph as an adjacency list)
4. Graph, SymbolGraph, DepthFirstPaths - data structure used in hasValidNetwork to determine
if a player has a valid network
5. HashTableChained - data structure used throughout project (e.g. in SymbolGraph to map
between symbol and index, in GameTree as a transposition table, in DepthFirstPaths to store
a valid path for a vertex count, etc.)
6. Stack - data structure used in GameBoard to save moves made by each player and the order
of turns


Modules used by MachinePlayer:
1. Generate a list of all valid moves (class: GameBoard)
2. Find chips (of same color) that form connections with a chip (class: GameBoard)
3. List to store valid moves, and all chips that form connection with a chip (class: List)
4. Determine whether game board contains any networks for a given player (class: GameBoard)
5. Perform minimax tree search (class: GameTree)


Module interface:
1. Generate a list of all valid moves (class: GameBoard)
/**
 *  getValidMoves() generates a List of all valid moves for the player.
 *  A full description of what constitutes a valid move appears in the
 *  project "README" file.
 *
 *  Unusual conditions:
 *   - if player is neither WHITE_PLAYER nor BLACK_PLAYER, throws IllegalArgumentException.
 *
 *  @param player is WHITE_PLAYER or BLACK_PLAYER.
 *  @return a List of all valid moves for the player.
 *
 *  Performance: runs in O(n^2) time, where n is the size of the board, BOARD_SIZE
 **/
protected List<MoveWithPlayer> getValidMoves(int player)


2. Find chips (of same color) that form connections with a chip (class: GameBoard)
/**
 *  getConnections() generates a List of chip positions (Integer arrays coordinates
 *  and direction) that form a connection with chips already on the board and the
 *  given x, y position.
 *
 *  Unusual conditions:
 *   - if player is neither WHITE_PLAYER or BLACK_PLAYER, throws IllegalArgumentException.
 *
 *  @param player is WHITE_PLAYER or BLACK_PLAYER.
 *  @param x is x coordinate of the square the chip is in.
 *  @param y is the y coordinate of the square the chip is in.
 *  @return a List of chip positions that form a connection with chip at given x,y.
 *
 *  Performance: runs in O(1) time.
 **/
protected List<Integer[]> getConnections(int player, int x, int y)


3. List to store valid moves, and all chips that form connection with a chip (class: List)

From HW5


4. Determine whether game board contains any networks for a given player (class: GameBoard)
/**
 *  hasValidNetwork() determines whether "this" GameBoard has a valid network
 *  for player.  (Does not check whether the opponent has a network.)
 *  A full description of what constitutes a valid network appears in the
 *  project "README" file.
 *
 *  Unusual conditions:
 *   - If player is neither WHITE_PLAYER nor BLACK_PLAYER, throws IllegalArgumentException.
 *   - If GameBoard squares contain illegal values, the behavior of this
 *     method is undefined (i.e., don't expect any reasonable behavior).
 *
 *  @param player is WHITE_PLAYER or BLACK_PLAYER.
 *  @return true if player has a winning network in "this" GameBoard, false otherwise.
 **/
protected boolean hasValidNetwork(int player)


5. Perform minimax tree search (class: GameTree)
/**
 * search() returns the best move for the player.
 *
 * @return the best move encountered up to the search depth
 */
protected MoveWithPlayer search()